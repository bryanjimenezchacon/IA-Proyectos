// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Public/SpeechRecognition.h"
#include "SpeechRecognition.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1SpeechRecognition() {}
static class UEnum* EPhraseRecognitionTolerance_StaticEnum()
{
	extern SPEECHRECOGNITION_API class UPackage* Z_Construct_UPackage__Script_SpeechRecognition();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance, Z_Construct_UPackage__Script_SpeechRecognition(), TEXT("EPhraseRecognitionTolerance"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPhraseRecognitionTolerance(EPhraseRecognitionTolerance_StaticEnum, TEXT("/Script/SpeechRecognition"), TEXT("EPhraseRecognitionTolerance"), false, nullptr, nullptr);
static class UEnum* ESpeechRecognitionLanguage_StaticEnum()
{
	extern SPEECHRECOGNITION_API class UPackage* Z_Construct_UPackage__Script_SpeechRecognition();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage, Z_Construct_UPackage__Script_SpeechRecognition(), TEXT("ESpeechRecognitionLanguage"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESpeechRecognitionLanguage(ESpeechRecognitionLanguage_StaticEnum, TEXT("/Script/SpeechRecognition"), TEXT("ESpeechRecognitionLanguage"), false, nullptr, nullptr);
static class UEnum* ESpeechRecognitionParamType_StaticEnum()
{
	extern SPEECHRECOGNITION_API class UPackage* Z_Construct_UPackage__Script_SpeechRecognition();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType, Z_Construct_UPackage__Script_SpeechRecognition(), TEXT("ESpeechRecognitionParamType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESpeechRecognitionParamType(ESpeechRecognitionParamType_StaticEnum, TEXT("/Script/SpeechRecognition"), TEXT("ESpeechRecognitionParamType"), false, nullptr, nullptr);
static class UEnum* ESpeechRecognitionMode_StaticEnum()
{
	extern SPEECHRECOGNITION_API class UPackage* Z_Construct_UPackage__Script_SpeechRecognition();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionMode, Z_Construct_UPackage__Script_SpeechRecognition(), TEXT("ESpeechRecognitionMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESpeechRecognitionMode(ESpeechRecognitionMode_StaticEnum, TEXT("/Script/SpeechRecognition"), TEXT("ESpeechRecognitionMode"), false, nullptr, nullptr);
class UScriptStruct* FRecognitionPhrase::StaticStruct()
{
	extern SPEECHRECOGNITION_API class UPackage* Z_Construct_UPackage__Script_SpeechRecognition();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SPEECHRECOGNITION_API class UScriptStruct* Z_Construct_UScriptStruct_FRecognitionPhrase();
		extern SPEECHRECOGNITION_API uint32 Get_Z_Construct_UScriptStruct_FRecognitionPhrase_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FRecognitionPhrase, Z_Construct_UPackage__Script_SpeechRecognition(), TEXT("RecognitionPhrase"), sizeof(FRecognitionPhrase), Get_Z_Construct_UScriptStruct_FRecognitionPhrase_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FRecognitionPhrase(FRecognitionPhrase::StaticStruct, TEXT("/Script/SpeechRecognition"), TEXT("RecognitionPhrase"), false, nullptr, nullptr);
static struct FScriptStruct_SpeechRecognition_StaticRegisterNativesFRecognitionPhrase
{
	FScriptStruct_SpeechRecognition_StaticRegisterNativesFRecognitionPhrase()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("RecognitionPhrase")),new UScriptStruct::TCppStructOps<FRecognitionPhrase>);
	}
} ScriptStruct_SpeechRecognition_StaticRegisterNativesFRecognitionPhrase;
class UScriptStruct* FRecognisedPhrases::StaticStruct()
{
	extern SPEECHRECOGNITION_API class UPackage* Z_Construct_UPackage__Script_SpeechRecognition();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SPEECHRECOGNITION_API class UScriptStruct* Z_Construct_UScriptStruct_FRecognisedPhrases();
		extern SPEECHRECOGNITION_API uint32 Get_Z_Construct_UScriptStruct_FRecognisedPhrases_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FRecognisedPhrases, Z_Construct_UPackage__Script_SpeechRecognition(), TEXT("RecognisedPhrases"), sizeof(FRecognisedPhrases), Get_Z_Construct_UScriptStruct_FRecognisedPhrases_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FRecognisedPhrases(FRecognisedPhrases::StaticStruct, TEXT("/Script/SpeechRecognition"), TEXT("RecognisedPhrases"), false, nullptr, nullptr);
static struct FScriptStruct_SpeechRecognition_StaticRegisterNativesFRecognisedPhrases
{
	FScriptStruct_SpeechRecognition_StaticRegisterNativesFRecognisedPhrases()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("RecognisedPhrases")),new UScriptStruct::TCppStructOps<FRecognisedPhrases>);
	}
} ScriptStruct_SpeechRecognition_StaticRegisterNativesFRecognisedPhrases;
	void ASpeechRecognitionActor::StaticRegisterNativesASpeechRecognitionActor()
	{
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "EnableGrammarMode",(Native)&ASpeechRecognitionActor::execEnableGrammarMode);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "EnableKeywordMode",(Native)&ASpeechRecognitionActor::execEnableKeywordMode);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "EnableLanguageModel",(Native)&ASpeechRecognitionActor::execEnableLanguageModel);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "GetCurrentVolume",(Native)&ASpeechRecognitionActor::execGetCurrentVolume);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "Init",(Native)&ASpeechRecognitionActor::execInit);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "SetConfigParam",(Native)&ASpeechRecognitionActor::execSetConfigParam);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "Shutdown",(Native)&ASpeechRecognitionActor::execShutdown);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "StartedSpeaking_method",(Native)&ASpeechRecognitionActor::execStartedSpeaking_method);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "StoppedSpeaking_method",(Native)&ASpeechRecognitionActor::execStoppedSpeaking_method);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "UnknownPhrase_method",(Native)&ASpeechRecognitionActor::execUnknownPhrase_method);
		FNativeFunctionRegistrar::RegisterFunction(ASpeechRecognitionActor::StaticClass(), "WordsSpoken_method",(Native)&ASpeechRecognitionActor::execWordsSpoken_method);
	}
	IMPLEMENT_CLASS(ASpeechRecognitionActor, 989125898);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AActor();

	SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance();
	SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage();
	SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType();
	SPEECHRECOGNITION_API class UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionMode();
	SPEECHRECOGNITION_API class UScriptStruct* Z_Construct_UScriptStruct_FRecognitionPhrase();
	SPEECHRECOGNITION_API class UScriptStruct* Z_Construct_UScriptStruct_FRecognisedPhrases();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_UnknownPhraseSignature__DelegateSignature();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_WordsSpokenSignature__DelegateSignature();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_StoppedSpeakingSignature__DelegateSignature();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_StartedSpeakingSignature__DelegateSignature();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_EnableGrammarMode();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_EnableKeywordMode();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_EnableLanguageModel();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_GetCurrentVolume();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_Init();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_SetConfigParam();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_Shutdown();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_StartedSpeaking_method();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_StoppedSpeaking_method();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_UnknownPhrase_method();
	SPEECHRECOGNITION_API class UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_WordsSpoken_method();
	SPEECHRECOGNITION_API class UClass* Z_Construct_UClass_ASpeechRecognitionActor_NoRegister();
	SPEECHRECOGNITION_API class UClass* Z_Construct_UClass_ASpeechRecognitionActor();
	SPEECHRECOGNITION_API class UPackage* Z_Construct_UPackage__Script_SpeechRecognition();
	UEnum* Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		extern uint32 Get_Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPhraseRecognitionTolerance"), 0, Get_Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPhraseRecognitionTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_1")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_2")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_3")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_4")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_5")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_6")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_7")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_8")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_9")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_10")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPhraseRecognitionTolerance::VE_MAX")), 10));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EPhraseRecognitionTolerance");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_1.DisplayName"), TEXT("V1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_10.DisplayName"), TEXT("V10"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_2.DisplayName"), TEXT("V2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_3.DisplayName"), TEXT("V3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_4.DisplayName"), TEXT("V4"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_5.DisplayName"), TEXT("V5"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_6.DisplayName"), TEXT("V6"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_7.DisplayName"), TEXT("V7"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_8.DisplayName"), TEXT("V8"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_9.DisplayName"), TEXT("V9"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance_CRC() { return 1753103492U; }
	UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		extern uint32 Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeechRecognitionLanguage"), 0, Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeechRecognitionLanguage"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionLanguage::VE_English")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionLanguage::VE_Chinese")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionLanguage::VE_French")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionLanguage::VE_Spanish")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionLanguage::VE_Russian")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionLanguage::VE_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ESpeechRecognitionLanguage");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Chinese.DisplayName"), TEXT("Chinese"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_English.DisplayName"), TEXT("English"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_French.DisplayName"), TEXT("French"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Russian.DisplayName"), TEXT("Russian"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Spanish.DisplayName"), TEXT("Spanish"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage_CRC() { return 3216473687U; }
	UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		extern uint32 Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeechRecognitionParamType"), 0, Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeechRecognitionParamType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionParamType::VE_FLOAT")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionParamType::VE_BOOLEAN")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionParamType::VE_STRING")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionParamType::VE_INTEGER")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionParamType::VE_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ESpeechRecognitionParamType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_BOOLEAN.DisplayName"), TEXT("Boolean"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_FLOAT.DisplayName"), TEXT("Float"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_INTEGER.DisplayName"), TEXT("Integer"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_STRING.DisplayName"), TEXT("String"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType_CRC() { return 1706474131U; }
	UEnum* Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		extern uint32 Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ESpeechRecognitionMode"), 0, Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESpeechRecognitionMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionMode::VE_KEYWORD")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionMode::VE_GRAMMAR")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionMode::VE_LANGUAGE_MODEL")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESpeechRecognitionMode::VE_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ESpeechRecognitionMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_GRAMMAR.DisplayName"), TEXT("Grammar"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_KEYWORD.DisplayName"), TEXT("Keyword Spotting"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LANGUAGE_MODEL.DisplayName"), TEXT("Language Model"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionMode_CRC() { return 3127789968U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRecognitionPhrase()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_SpeechRecognition();
		extern uint32 Get_Z_Construct_UScriptStruct_FRecognitionPhrase_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("RecognitionPhrase"), sizeof(FRecognitionPhrase), Get_Z_Construct_UScriptStruct_FRecognitionPhrase_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RecognitionPhrase"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRecognitionPhrase>, EStructFlags(0x00000001));
			UProperty* NewProp_tolerance = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("tolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(tolerance, FRecognitionPhrase), 0x0010000000000004, Z_Construct_UEnum_SpeechRecognition_EPhraseRecognitionTolerance());
			UProperty* NewProp_phrase = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("phrase"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(phrase, FRecognitionPhrase), 0x0010000000000004);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
			MetaData->SetValue(NewProp_tolerance, TEXT("Category"), TEXT("RecognitionPhrase"));
			MetaData->SetValue(NewProp_tolerance, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
			MetaData->SetValue(NewProp_phrase, TEXT("Category"), TEXT("RecognitionPhrase"));
			MetaData->SetValue(NewProp_phrase, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRecognitionPhrase_CRC() { return 545875434U; }
	UScriptStruct* Z_Construct_UScriptStruct_FRecognisedPhrases()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_SpeechRecognition();
		extern uint32 Get_Z_Construct_UScriptStruct_FRecognisedPhrases_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("RecognisedPhrases"), sizeof(FRecognisedPhrases), Get_Z_Construct_UScriptStruct_FRecognisedPhrases_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RecognisedPhrases"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRecognisedPhrases>, EStructFlags(0x00000001));
			UProperty* NewProp_phrases = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("phrases"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(phrases, FRecognisedPhrases), 0x0010000000000004);
			UProperty* NewProp_phrases_Inner = new(EC_InternalUseOnlyConstructor, NewProp_phrases, TEXT("phrases"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Common structures and enumerations"));
			MetaData->SetValue(NewProp_phrases, TEXT("Category"), TEXT("RecognisedPhrases"));
			MetaData->SetValue(NewProp_phrases, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognition.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRecognisedPhrases_CRC() { return 2370463932U; }
	UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_UnknownPhraseSignature__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnknownPhraseSignature__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_WordsSpokenSignature__DelegateSignature()
	{
		struct _Script_SpeechRecognition_eventWordsSpokenSignature_Parms
		{
			FRecognisedPhrases Text;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WordsSpokenSignature__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpeechRecognition_eventWordsSpokenSignature_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Text, _Script_SpeechRecognition_eventWordsSpokenSignature_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRecognisedPhrases());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_StoppedSpeakingSignature__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StoppedSpeakingSignature__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpeechRecognition_StartedSpeakingSignature__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_SpeechRecognition();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StartedSpeakingSignature__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_EnableGrammarMode()
	{
		struct SpeechRecognitionActor_eventEnableGrammarMode_Parms
		{
			FString grammarName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableGrammarMode"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpeechRecognitionActor_eventEnableGrammarMode_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpeechRecognitionActor_eventEnableGrammarMode_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpeechRecognitionActor_eventEnableGrammarMode_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpeechRecognitionActor_eventEnableGrammarMode_Parms), sizeof(bool), true);
			UProperty* NewProp_grammarName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("grammarName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(grammarName, SpeechRecognitionActor_eventEnableGrammarMode_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Enable Grammar Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Speech Recognition Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_EnableKeywordMode()
	{
		struct SpeechRecognitionActor_eventEnableKeywordMode_Parms
		{
			TArray<FRecognitionPhrase> wordList;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableKeywordMode"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpeechRecognitionActor_eventEnableKeywordMode_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpeechRecognitionActor_eventEnableKeywordMode_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpeechRecognitionActor_eventEnableKeywordMode_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpeechRecognitionActor_eventEnableKeywordMode_Parms), sizeof(bool), true);
			UProperty* NewProp_wordList = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("wordList"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(wordList, SpeechRecognitionActor_eventEnableKeywordMode_Parms), 0x0010000000000080);
			UProperty* NewProp_wordList_Inner = new(EC_InternalUseOnlyConstructor, NewProp_wordList, TEXT("wordList"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRecognitionPhrase());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Enable Keyword Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Speech Recognition Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Methods to switch recognition modes"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_EnableLanguageModel()
	{
		struct SpeechRecognitionActor_eventEnableLanguageModel_Parms
		{
			FString languageModel;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableLanguageModel"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpeechRecognitionActor_eventEnableLanguageModel_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpeechRecognitionActor_eventEnableLanguageModel_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpeechRecognitionActor_eventEnableLanguageModel_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpeechRecognitionActor_eventEnableLanguageModel_Parms), sizeof(bool), true);
			UProperty* NewProp_languageModel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("languageModel"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(languageModel, SpeechRecognitionActor_eventEnableLanguageModel_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Enable Language Model Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Speech Recognition Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_GetCurrentVolume()
	{
		struct SpeechRecognitionActor_eventGetCurrentVolume_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpeechRecognitionActor_eventGetCurrentVolume_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SpeechRecognitionActor_eventGetCurrentVolume_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetCurrentVolume"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Speech Recognition Volume"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Basic functions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_Init()
	{
		struct SpeechRecognitionActor_eventInit_Parms
		{
			TEnumAsByte<ESpeechRecognitionLanguage> language;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Init"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpeechRecognitionActor_eventInit_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpeechRecognitionActor_eventInit_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpeechRecognitionActor_eventInit_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpeechRecognitionActor_eventInit_Parms), sizeof(bool), true);
			UProperty* NewProp_language = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("language"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(language, SpeechRecognitionActor_eventInit_Parms), 0x0010000000000080, Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionLanguage());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Init"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Speech Recognition Init"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_SetConfigParam()
	{
		struct SpeechRecognitionActor_eventSetConfigParam_Parms
		{
			FString param;
			TEnumAsByte<ESpeechRecognitionParamType> type;
			FString value;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetConfigParam"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpeechRecognitionActor_eventSetConfigParam_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpeechRecognitionActor_eventSetConfigParam_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpeechRecognitionActor_eventSetConfigParam_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpeechRecognitionActor_eventSetConfigParam_Parms), sizeof(bool), true);
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(value, SpeechRecognitionActor_eventSetConfigParam_Parms), 0x0010000000000080);
			UProperty* NewProp_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("type"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(type, SpeechRecognitionActor_eventSetConfigParam_Parms), 0x0010000000000080, Z_Construct_UEnum_SpeechRecognition_ESpeechRecognitionParamType());
			UProperty* NewProp_param = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("param"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(param, SpeechRecognitionActor_eventSetConfigParam_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetConfigParam"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Speech Recognition Set Config Param"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_Shutdown()
	{
		struct SpeechRecognitionActor_eventShutdown_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Shutdown"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpeechRecognitionActor_eventShutdown_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpeechRecognitionActor_eventShutdown_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpeechRecognitionActor_eventShutdown_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpeechRecognitionActor_eventShutdown_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Shutdown"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Speech Recognition Shutdown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_StartedSpeaking_method()
	{
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StartedSpeaking_method"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_StoppedSpeaking_method()
	{
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StoppedSpeaking_method"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_UnknownPhrase_method()
	{
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnknownPhrase_method"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ASpeechRecognitionActor_WordsSpoken_method()
	{
		struct SpeechRecognitionActor_eventWordsSpoken_method_Parms
		{
			FRecognisedPhrases phrases;
		};
		UObject* Outer=Z_Construct_UClass_ASpeechRecognitionActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WordsSpoken_method"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535, sizeof(SpeechRecognitionActor_eventWordsSpoken_method_Parms));
			UProperty* NewProp_phrases = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("phrases"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(phrases, SpeechRecognitionActor_eventWordsSpoken_method_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRecognisedPhrases());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Callback events"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ASpeechRecognitionActor_NoRegister()
	{
		return ASpeechRecognitionActor::StaticClass();
	}
	UClass* Z_Construct_UClass_ASpeechRecognitionActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_SpeechRecognition();
			OuterClass = ASpeechRecognitionActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_EnableGrammarMode());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_EnableKeywordMode());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_EnableLanguageModel());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_GetCurrentVolume());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_Init());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_SetConfigParam());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_Shutdown());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_StartedSpeaking_method());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_StoppedSpeaking_method());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_UnknownPhrase_method());
				OuterClass->LinkChild(Z_Construct_UFunction_ASpeechRecognitionActor_WordsSpoken_method());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnStoppedSpeaking = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnStoppedSpeaking"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnStoppedSpeaking, ASpeechRecognitionActor), 0x0010000010080000, Z_Construct_UDelegateFunction_SpeechRecognition_StoppedSpeakingSignature__DelegateSignature());
				UProperty* NewProp_OnStartedSpeaking = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnStartedSpeaking"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnStartedSpeaking, ASpeechRecognitionActor), 0x0010000010080000, Z_Construct_UDelegateFunction_SpeechRecognition_StartedSpeakingSignature__DelegateSignature());
				UProperty* NewProp_OnUnknownPhrase = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnUnknownPhrase"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnUnknownPhrase, ASpeechRecognitionActor), 0x0010000010080000, Z_Construct_UDelegateFunction_SpeechRecognition_UnknownPhraseSignature__DelegateSignature());
				UProperty* NewProp_OnWordsSpoken = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnWordsSpoken"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnWordsSpoken, ASpeechRecognitionActor), 0x0010000010080000, Z_Construct_UDelegateFunction_SpeechRecognition_WordsSpokenSignature__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_EnableGrammarMode(), "EnableGrammarMode"); // 3602777107
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_EnableKeywordMode(), "EnableKeywordMode"); // 955922983
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_EnableLanguageModel(), "EnableLanguageModel"); // 779813656
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_GetCurrentVolume(), "GetCurrentVolume"); // 454568175
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_Init(), "Init"); // 1419877109
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_SetConfigParam(), "SetConfigParam"); // 441926566
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_Shutdown(), "Shutdown"); // 1703018860
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_StartedSpeaking_method(), "StartedSpeaking_method"); // 52512148
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_StoppedSpeaking_method(), "StoppedSpeaking_method"); // 2654010904
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_UnknownPhrase_method(), "UnknownPhrase_method"); // 3079333415
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ASpeechRecognitionActor_WordsSpoken_method(), "WordsSpoken_method"); // 1518831531
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpeechRecognitionActor.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
				MetaData->SetValue(NewProp_OnStoppedSpeaking, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_OnStoppedSpeaking, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
				MetaData->SetValue(NewProp_OnStartedSpeaking, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_OnStartedSpeaking, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
				MetaData->SetValue(NewProp_OnUnknownPhrase, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_OnUnknownPhrase, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
				MetaData->SetValue(NewProp_OnWordsSpoken, TEXT("Category"), TEXT("Audio"));
				MetaData->SetValue(NewProp_OnWordsSpoken, TEXT("ModuleRelativePath"), TEXT("Public/SpeechRecognitionActor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ASpeechRecognitionActor(Z_Construct_UClass_ASpeechRecognitionActor, &ASpeechRecognitionActor::StaticClass, TEXT("ASpeechRecognitionActor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ASpeechRecognitionActor);
	UPackage* Z_Construct_UPackage__Script_SpeechRecognition()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/SpeechRecognition")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x7EA3F322;
			Guid.B = 0xF305A6CC;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_SpeechRecognition_StartedSpeakingSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_SpeechRecognition_StoppedSpeakingSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_SpeechRecognition_WordsSpokenSignature__DelegateSignature();
			Z_Construct_UDelegateFunction_SpeechRecognition_UnknownPhraseSignature__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
